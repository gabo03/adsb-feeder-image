#!/usr/bin/env bash
# this is an adaptation of Ramon Kolb's docker-install.sh
# modified to build a base image (so intended for non-interactive use) by Dirk Hohndel <dirk@hohndel.org>
########
set -ex

source /common.sh
install_cleanup_trap

#shellcheck shell=bash external-sources=false disable=SC1090,SC2164
# DOCKER-INSTALL.SH -- Installation script for the Docker infrastructure on a Raspbian or Ubuntu system
# Usage: source <(curl -s https://raw.githubusercontent.com/sdr-enthusiasts/docker-install/main/docker-install.sh)
#
# Copyright 2021-2023 Ramon F. Kolb (kx1t)- licensed under the terms and conditions
# of the MIT license. The terms and conditions of this license are included with the Github
# distribution of this package.
#
#
export DEBIAN_FRONTEND=noninteractive

    echo "Installing docker, each step may take a while:"
    echo -n "Updating repositories... "
    apt-get update -qq -y >/dev/null
    echo -n "Ensuring dependencies are installed... "
    apt-get install -qq -y git rtl-sdr apt-transport-https ca-certificates curl gnupg2 slirp4netns uidmap jq zstd netcat-openbsd >/dev/null
    echo -n "Getting docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    echo "Installing Docker... "
    sh get-docker.sh
    echo "Docker installed -- configuring docker..."
    usermod -aG docker "${BASE_USER}"
    mkdir -p /etc/docker
    chmod a+rwx /etc/docker
    cat > /etc/docker/daemon.json <<EOF
{
  "log-driver": "journald",
  "log-level": "warn",
  "userland-proxy": false,
  "debug": false
}
EOF
    chmod u=rw,go=r /etc/docker/daemon.json

    BLOCKED_MODULES=("rtl2832_sdr")
    BLOCKED_MODULES+=("dvb_usb_rtl2832u")
    BLOCKED_MODULES+=("dvb_usb_rtl28xxu")
    BLOCKED_MODULES+=("dvb_usb_v2")
    BLOCKED_MODULES+=("r820t")
    BLOCKED_MODULES+=("rtl2830")
    BLOCKED_MODULES+=("rtl2832")
    BLOCKED_MODULES+=("rtl2838")
    BLOCKED_MODULES+=("dvb_core")
    echo -n "Getting the latest UDEV rules... "
    mkdir -p /etc/udev/rules.d /etc/udev/hwdb.d
    # First install the UDEV rules for RTL-SDR dongles
    curl -sL -o /etc/udev/rules.d/rtl-sdr.rules https://raw.githubusercontent.com/wiedehopf/adsb-scripts/master/osmocom-rtl-sdr.rules
    curl -sL -o /etc/udev/rules.d/dump978-fa.rules https://raw.githubusercontent.com/flightaware/dump978/master/debian/dump978-fa.udev
    # Now install the UDEV rules for SDRPlay devices
    curl -sL -o /etc/udev/rules.d/66-mirics.rules https://raw.githubusercontent.com/sdr-enthusiasts/install-libsdrplay/main/66-mirics.rules
    curl -sL -o /etc/udev/hwdb.d/20-sdrplay.hwdb https://raw.githubusercontent.com/sdr-enthusiasts/install-libsdrplay/main/20-sdrplay.hwdb
    # Next, exclude the drivers so the dongles stay accessible
    echo -n "Excluding and unloading any competing RTL-SDR drivers... "
    UNLOAD_SUCCESS=true
    for module in "${BLOCKED_MODULES[@]}"
    do
        if ! grep -q "$module" /etc/modprobe.d/exclusions-rtl2832.conf
        then
          echo blacklist "$module" >>/etc/modprobe.d/exclusions-rtl2832.conf
          echo install "$module" /bin/false >>/etc/modprobe.d/exclusions-rtl2832.conf
        fi
    done

    if [[ "${UNLOAD_SUCCESS}" == false ]]; then
      echo "INFO: Although we've successfully excluded any competing RTL-SDR drivers, we weren't able to unload them. This will remedy itself when you reboot your system after the script finishes."
    fi

#
# The following prevents DHCPCD based systems from trying to assign IP addresses to each of the Docker containers.
# Note that this is not needed or available if the system uses DHCPD instead of DHCPCD.
if [[ -f /etc/dhcpcd.conf ]] && ! grep "denyinterfaces veth\*" /etc/dhcpcd.conf >/dev/null 2>&1
then
  echo -n "Excluding veth interfaces from dhcp. This will prevent problems if you are connected to the internet via WiFi when running many Docker containers... "
  sh -c 'echo "denyinterfaces veth*" >> /etc/dhcpcd.conf'
  # don't do that during setup: sudo systemctl restart dhcpcd.service
  echo "done!"
fi

# Add some aliases to localhost in `/etc/hosts`. This will speed up recreation of images with docker-compose
if ! grep localunixsocket /etc/hosts >/dev/null 2>&1
then
  echo "Speeding up the recreation of containers when using docker-compose..."
  sed -i 's/^\(127.0.0.1\s*localhost\)\(.*\)/\1\2 localunixsocket localunixsocket.local localunixsocket.home/g' /etc/hosts
fi

#cleanup
apt-get clean
